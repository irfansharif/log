// Copyright 2018, Irfan Sharif.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package log

import (
	"path/filepath"
	"runtime"
)

type option func(*Logger)

type Flag int

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// TODO(irfansharif): Update comments.
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//	2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message

	Ldate         Flag = 1 << iota // The date in the local time zone: 2009/01/23
	Ltime                          // The time in the local time zone: 01:23:23
	Lmicroseconds                  // Microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                      // Full file name and line number: /a/b/c/d.go:23
	Lshortfile                     // Final file name element and line number: d.go:23. overrides Llongfile
	LUTC                           // If Ldate or Ltime is set, use UTC rather than the local time zone
	Lmode                          // If

	LstdFlags = Lmode | Lshortfile // Initial values for the standard logger
)

func Flags(flags Flag) option {
	return func(l *Logger) {
		l.flag = flags
	}
}

// TODO(irfansharif): Comment. Better name? Rename 'root'.
func SkipProjectPath(root ...string) option {
	var bdir string
	if len(root) > 1 {
		// TODO(irfansharif): Remove panic, simply use first root.
		panic("expecting single root dir")
	}

	if len(root) == 0 {
		// Determine root directory from caller.
		_, file, _, ok := runtime.Caller(1)
		if !ok {
			panic("unable to retrieve caller")
		}
		bdir = filepath.Dir(file)
	} else {
		// len(root) == 1; base dir is provided.
		bdir = root[0]
	}

	return func(l *Logger) {
		l.bdir = bdir
	}
}
